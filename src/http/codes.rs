#[allow(dead_code)]
pub enum HttpCode {
    Continue,
    SwitchingProtocols,
    Processing,
    EarlyHints,
    OK,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    MultiStatus,
    AlreadyReported,
    ImUsed,
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    UseProxy,
    SwitchProxy,
    TemporaryRedirect,
    PermanentRedirect,
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    RequestEntityTooLarge,
    URITooLong,
    UnsupportedMediaType,
    RangeNotSatisfiable,
    ExpectationFailed,
    ImTeapot,
    MisdirectedRequest,
    UnprocessableEntity,
    Locked,
    FailedDependency,
    TooEarly,
    UpgradeRequired,
    PreconditionRequired,
    TooManyRequests,
    RequestHeaderFieldsTooLarge,
    UnavailableForLegalReasons,
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HTTPVersionNotSupported,
    VariantAlsoNegotiates,
    InsufficientStorage,
    LoopDetected,
    NotExtended,
    NetworkAuthenticationRequired,
}

impl HttpCode {
    pub fn get_description (&self) -> (&str, &str) {
        match self {
            HttpCode::Continue => ("100", "Continue"),
            HttpCode::SwitchingProtocols => ("101", "Switching Protocols"),
            HttpCode::Processing => ("102", "Processing"),
            HttpCode::EarlyHints => ("103", "Early Hints"),
            HttpCode::OK => ("200", "OK"),
            HttpCode::Created => ("201", "Created"),
            HttpCode::Accepted => ("202", "Accepted"),
            HttpCode::NonAuthoritativeInformation => ("203", "Non Authoritative Information"),
            HttpCode::NoContent => ("204", "No Content"),
            HttpCode::ResetContent => ("205", "Reset Content"),
            HttpCode::PartialContent => ("206", "Partial Content"),
            HttpCode::MultiStatus => ("207", "Multi Status"),
            HttpCode::AlreadyReported => ("208", "Already Reported"),
            HttpCode::ImUsed => ("226", "IM Used"),
            HttpCode::MultipleChoices => ("300", "Multiple Choices"),
            HttpCode::MovedPermanently => ("301", "Moved Permanently"),
            HttpCode::Found => ("302", "Found"),
            HttpCode::SeeOther => ("303", "See Other"),
            HttpCode::NotModified => ("304", "Not Modified"),
            HttpCode::UseProxy => ("305", "Use Proxy"),
            HttpCode::SwitchProxy => ("306", "Switch Proxy"),
            HttpCode::TemporaryRedirect => ("307", "Temporary Redirect"),
            HttpCode::PermanentRedirect => ("308", "Permanent Redirect"),
            HttpCode::BadRequest => ("400", "Bad Request"),
            HttpCode::Unauthorized => ("401", "Unauthorized"),
            HttpCode::PaymentRequired => ("402", "Payment Required"),
            HttpCode::Forbidden => ("403", "Forbidden"),
            HttpCode::NotFound => ("404", "Not Found"),
            HttpCode::MethodNotAllowed => ("405", "Method Not Allowed"),
            HttpCode::NotAcceptable => ("406", "Not Acceptable"),
            HttpCode::ProxyAuthenticationRequired => ("407", "Proxy Authentication Required"),
            HttpCode::RequestTimeout => ("408", "Request Timeout"),
            HttpCode::Conflict => ("409", "Conflict"),
            HttpCode::Gone => ("410", "Gone"),
            HttpCode::LengthRequired => ("411", "Length Required"),
            HttpCode::PreconditionFailed => ("412", "Precondition Failed"),
            HttpCode::RequestEntityTooLarge => ("413", "Request Entity Too Large"),
            HttpCode::URITooLong => ("414", "URI Too Long"),
            HttpCode::UnsupportedMediaType => ("415", "Unsupported Media Type"),
            HttpCode::RangeNotSatisfiable => ("416", "Range Not Satisfiable"),
            HttpCode::ExpectationFailed => ("417", "Expectation Failed"),
            HttpCode::ImTeapot => ("418", "I'm a Teapot"),
            HttpCode::MisdirectedRequest => ("421", "Misdirected Request"),
            HttpCode::UnprocessableEntity => ("422", "Unprocessable Entity"),
            HttpCode::Locked => ("423", "Locked"),
            HttpCode::FailedDependency => ("424", "Failed Dependency"),
            HttpCode::TooEarly => ("425", "Too Early"),
            HttpCode::UpgradeRequired => ("426", "Upgrade Required"),
            HttpCode::PreconditionRequired => ("428", "Precondition Required"),
            HttpCode::TooManyRequests => ("429", "Too Many Requests"),
            HttpCode::RequestHeaderFieldsTooLarge => ("431", "Request Header Fields Too Large"),
            HttpCode::UnavailableForLegalReasons => ("451", "Unavailable For Legal Reasons"),
            HttpCode::InternalServerError => ("500", "Internal Server Error"),
            HttpCode::NotImplemented => ("501", "Not Implemented"),
            HttpCode::BadGateway => ("502", "Bad Gateway"),
            HttpCode::ServiceUnavailable => ("503", "Service Unavailable"),
            HttpCode::GatewayTimeout => ("504", "Gateway Timeout"),
            HttpCode::HTTPVersionNotSupported => ("505", "HTTP Version Not Supported"),
            HttpCode::VariantAlsoNegotiates => ("506", "Variant Also Negotiates"),
            HttpCode::InsufficientStorage => ("507", "Insufficient Storage"),
            HttpCode::LoopDetected => ("508", "Loop Detected"),
            HttpCode::NotExtended => ("510", "Not Extended"),
            HttpCode::NetworkAuthenticationRequired => ("511", "Network Authentication Required"),
        }
    }

    pub fn get_by_code (code: u16) -> Option<HttpCode> {
        match code {
            100 => Some(HttpCode::Continue),
            101 => Some(HttpCode::SwitchingProtocols),
            102 => Some(HttpCode::Processing),
            103 => Some(HttpCode::EarlyHints),
            200 => Some(HttpCode::OK),
            201 => Some(HttpCode::Created),
            202 => Some(HttpCode::Accepted),
            203 => Some(HttpCode::NonAuthoritativeInformation),
            204 => Some(HttpCode::NoContent),
            205 => Some(HttpCode::ResetContent),
            206 => Some(HttpCode::PartialContent),
            207 => Some(HttpCode::MultiStatus),
            208 => Some(HttpCode::AlreadyReported),
            226 => Some(HttpCode::ImUsed),
            300 => Some(HttpCode::MultipleChoices),
            301 => Some(HttpCode::MovedPermanently),
            302 => Some(HttpCode::Found),
            303 => Some(HttpCode::SeeOther),
            304 => Some(HttpCode::NotModified),
            305 => Some(HttpCode::UseProxy),
            306 => Some(HttpCode::SwitchProxy),
            307 => Some(HttpCode::TemporaryRedirect),
            308 => Some(HttpCode::PermanentRedirect),
            400 => Some(HttpCode::BadRequest),
            401 => Some(HttpCode::Unauthorized),
            402 => Some(HttpCode::PaymentRequired),
            403 => Some(HttpCode::Forbidden),
            404 => Some(HttpCode::NotFound),
            405 => Some(HttpCode::MethodNotAllowed),
            406 => Some(HttpCode::NotAcceptable),
            407 => Some(HttpCode::ProxyAuthenticationRequired),
            408 => Some(HttpCode::RequestTimeout),
            409 => Some(HttpCode::Conflict),
            410 => Some(HttpCode::Gone),
            411 => Some(HttpCode::LengthRequired),
            412 => Some(HttpCode::PreconditionFailed),
            413 => Some(HttpCode::RequestEntityTooLarge),
            414 => Some(HttpCode::URITooLong),
            415 => Some(HttpCode::UnsupportedMediaType),
            416 => Some(HttpCode::RangeNotSatisfiable),
            417 => Some(HttpCode::ExpectationFailed),
            418 => Some(HttpCode::ImTeapot),
            421 => Some(HttpCode::MisdirectedRequest),
            422 => Some(HttpCode::UnprocessableEntity),
            423 => Some(HttpCode::Locked),
            424 => Some(HttpCode::FailedDependency),
            425 => Some(HttpCode::TooEarly),
            426 => Some(HttpCode::UpgradeRequired),
            428 => Some(HttpCode::PreconditionRequired),
            429 => Some(HttpCode::TooManyRequests),
            431 => Some(HttpCode::RequestHeaderFieldsTooLarge),
            451 => Some(HttpCode::UnavailableForLegalReasons),
            500 => Some(HttpCode::InternalServerError),
            501 => Some(HttpCode::NotImplemented),
            502 => Some(HttpCode::BadGateway),
            503 => Some(HttpCode::ServiceUnavailable),
            504 => Some(HttpCode::GatewayTimeout),
            505 => Some(HttpCode::HTTPVersionNotSupported),
            506 => Some(HttpCode::VariantAlsoNegotiates),
            507 => Some(HttpCode::InsufficientStorage),
            508 => Some(HttpCode::LoopDetected),
            510 => Some(HttpCode::NotExtended),
            511 => Some(HttpCode::NetworkAuthenticationRequired),
            _ => None
        }
    }
}
